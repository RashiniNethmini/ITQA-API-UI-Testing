[
  {
    "description": "",
    "elements": [
      {
        "description": "",
        "id": "delete-a-book;verify-the-response-of-the-delete-api-as-admin-with-an-existing-id",
        "keyword": "Scenario",
        "line": 5,
        "name": "Verify the response of the DELETE API as admin with an existing ID",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 6,
            "name": "a random book is created",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:14"
            },
            "result": {
              "status": "passed",
              "duration": 117552399
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 7,
            "name": "I am an authenticated DELETE admin API client",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:20"
            },
            "result": {
              "status": "passed",
              "duration": 7103999
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 8,
            "name": "I send a DELETE request with an existing book ID",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:30"
            },
            "result": {
              "status": "passed",
              "duration": 69990299
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 9,
            "name": "the response status of DELETE should be 200",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:40"
            },
            "result": {
              "status": "failed",
              "duration": 2653499,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m403\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\deleteBook.steps.ts:41:33)"
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "delete-a-book;verify-the-response-of-the-delete-api-as-user-with-an-existing-id",
        "keyword": "Scenario",
        "line": 11,
        "name": "Verify the response of the DELETE API as user with an existing ID",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 12,
            "name": "a random book is created",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:14"
            },
            "result": {
              "status": "passed",
              "duration": 75510899
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 13,
            "name": "I am an authenticated DELETE user API client",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:25"
            },
            "result": {
              "status": "passed",
              "duration": 2388100
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 14,
            "name": "I send a DELETE request with an existing book ID",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:30"
            },
            "result": {
              "status": "passed",
              "duration": 71075900
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 15,
            "name": "the response status of DELETE should be 403",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:40"
            },
            "result": {
              "status": "failed",
              "duration": 1515999,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m403\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\deleteBook.steps.ts:41:33)"
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 16,
            "name": "the response should contain an error message \"User is not permitted.\"",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:44"
            },
            "result": {
              "status": "skipped",
              "duration": 0
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "delete-a-book;verify-the-response-of-the-delete-api-as-admin-with-a-non-existing-id",
        "keyword": "Scenario",
        "line": 22,
        "name": "Verify the response of the DELETE API as admin with a non-existing ID",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 23,
            "name": "I am an authenticated DELETE admin API client",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:20"
            },
            "result": {
              "status": "passed",
              "duration": 1882300
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 24,
            "name": "I send a DELETE request with a non-existing book ID",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:35"
            },
            "result": {
              "status": "passed",
              "duration": 67305599
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 25,
            "name": "the response status of DELETE should be 404",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:40"
            },
            "result": {
              "status": "failed",
              "duration": 1150599,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m403\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\deleteBook.steps.ts:41:33)"
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "delete-a-book;verify-the-response-of-the-delete-api-as-user-with-a-non-existing-id",
        "keyword": "Scenario",
        "line": 27,
        "name": "Verify the response of the DELETE API as user with a non-existing ID",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 28,
            "name": "I am an authenticated DELETE user API client",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:25"
            },
            "result": {
              "status": "passed",
              "duration": 2013400
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 29,
            "name": "I send a DELETE request with a non-existing book ID",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:35"
            },
            "result": {
              "status": "passed",
              "duration": 67778799
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 30,
            "name": "the response status of DELETE should be 403",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:40"
            },
            "result": {
              "status": "failed",
              "duration": 743799,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m403\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\deleteBook.steps.ts:41:33)"
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 31,
            "name": "the response should contain an error message \"User is not permitted.\"",
            "match": {
              "location": "src\\tests\\steps\\deleteBook.steps.ts:44"
            },
            "result": {
              "status": "skipped",
              "duration": 0
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      }
    ],
    "id": "delete-a-book",
    "line": 1,
    "keyword": "Feature",
    "name": "Delete a book",
    "tags": [],
    "uri": "src\\tests\\features\\deleteBook.feature"
  },
  {
    "description": "",
    "elements": [
      {
        "description": "",
        "id": "get-books;verify-the-response-of-the-get-/api/books-api-as-admin",
        "keyword": "Scenario",
        "line": 5,
        "name": "Verify the response of the GET /api/books API as admin",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 6,
            "name": "there is a book entry in the system",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:19"
            },
            "result": {
              "status": "passed",
              "duration": 74470600
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 7,
            "name": "I am an authenticated admin API client",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:31"
            },
            "result": {
              "status": "passed",
              "duration": 2254800
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 8,
            "name": "I send a GET request to the \"books\" endpoint",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:49"
            },
            "result": {
              "status": "passed",
              "duration": 69432900
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 9,
            "name": "the response status should be 200",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:71"
            },
            "result": {
              "status": "passed",
              "duration": 1305800
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 10,
            "name": "the response should contain a list of books",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:76"
            },
            "result": {
              "status": "passed",
              "duration": 3408100
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "get-books;verify-the-response-of-the-get-/api/books-api-as-user",
        "keyword": "Scenario",
        "line": 13,
        "name": "Verify the response of the GET /api/books API as user",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 14,
            "name": "there is a book entry in the system",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:19"
            },
            "result": {
              "status": "passed",
              "duration": 77472599
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 15,
            "name": "I am an authenticated user API client",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:37"
            },
            "result": {
              "status": "passed",
              "duration": 4031199
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 16,
            "name": "I send a GET request to the \"books\" endpoint",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:49"
            },
            "result": {
              "status": "passed",
              "duration": 71047699
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 17,
            "name": "the response status should be 200",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:71"
            },
            "result": {
              "status": "passed",
              "duration": 968799
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 18,
            "name": "the response should contain a list of books",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:76"
            },
            "result": {
              "status": "passed",
              "duration": 2993699
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "get-books;verify-the-response-of-the-get-/api/books/{bookid}-api-as-admin-with-non-existing-id",
        "keyword": "Scenario",
        "line": 22,
        "name": "Verify the response of the Get /api/books/{bookId} API as admin with non-existing ID",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 23,
            "name": "there is a book entry in the system",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:19"
            },
            "result": {
              "status": "passed",
              "duration": 70320699
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 24,
            "name": "I am an authenticated admin API client",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:31"
            },
            "result": {
              "status": "passed",
              "duration": 1528200
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 25,
            "name": "I send a GET request to the \"books/100000\" endpoint with a non-existing ID",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:57"
            },
            "result": {
              "status": "passed",
              "duration": 68846800
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 26,
            "name": "the response status should be 404",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:71"
            },
            "result": {
              "status": "passed",
              "duration": 799700
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "get-books;verify-the-response-of-the-get-/api/books/{bookid}-api-as-user-with-non-existing-id",
        "keyword": "Scenario",
        "line": 28,
        "name": "Verify the response of the Get /api/books/{bookId} API as user with non-existing ID",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 29,
            "name": "there is a book entry in the system",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:19"
            },
            "result": {
              "status": "passed",
              "duration": 73981700
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 30,
            "name": "I am an authenticated user API client",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:37"
            },
            "result": {
              "status": "passed",
              "duration": 1792699
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 31,
            "name": "I send a GET request to the \"books/100000\" endpoint with a non-existing ID",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:57"
            },
            "result": {
              "status": "passed",
              "duration": 66918299
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 32,
            "name": "the response status should be 404",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:71"
            },
            "result": {
              "status": "failed",
              "duration": 1669900,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m403\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\getBooks.steps.ts:72:33)"
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "get-books;verify-the-response-of-the-get-/api/books/{bookid}-api-as-admin-with-existing-id",
        "keyword": "Scenario",
        "line": 37,
        "name": "Verify the response of the GET /api/books/{bookId} API as admin with existing ID",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 38,
            "name": "I create a new book with a random title",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:42"
            },
            "result": {
              "status": "passed",
              "duration": 74194700
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 39,
            "name": "I am an authenticated admin API client",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:31"
            },
            "result": {
              "status": "passed",
              "duration": 1378199
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 40,
            "name": "I send a GET request with an existing book ID",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:65"
            },
            "result": {
              "status": "passed",
              "duration": 67734999
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 41,
            "name": "the response status should be 200",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:71"
            },
            "result": {
              "status": "passed",
              "duration": 674000
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 42,
            "name": "the response should contain the details of the book",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:82"
            },
            "result": {
              "status": "passed",
              "duration": 3807699
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "get-books;verify-the-response-of-the-get-/api/books/{bookid}-api-as-user-with-existing-id",
        "keyword": "Scenario",
        "line": 44,
        "name": "Verify the response of the GET /api/books/{bookId} API as user with existing ID",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 45,
            "name": "I create a new book with a random title",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:42"
            },
            "result": {
              "status": "passed",
              "duration": 72140399
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 46,
            "name": "I am an authenticated user API client",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:37"
            },
            "result": {
              "status": "passed",
              "duration": 1638499
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 47,
            "name": "I send a GET request with an existing book ID",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:65"
            },
            "result": {
              "status": "passed",
              "duration": 69749599
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 48,
            "name": "the response status should be 200",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:71"
            },
            "result": {
              "status": "failed",
              "duration": 1151700,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m403\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\getBooks.steps.ts:72:33)"
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 49,
            "name": "the response should contain the details of the book",
            "match": {
              "location": "src\\tests\\steps\\getBooks.steps.ts:82"
            },
            "result": {
              "status": "skipped",
              "duration": 0
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      }
    ],
    "id": "get-books",
    "line": 1,
    "keyword": "Feature",
    "name": "Get books",
    "tags": [],
    "uri": "src\\tests\\features\\getBooks.feature"
  },
  {
    "description": "",
    "elements": [
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-admin-with-valid-data",
        "keyword": "Scenario",
        "line": 3,
        "name": "Verify the response of the POST /api/books API as admin with valid data",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 4,
            "name": "I am an authenticated POST admin API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:13"
            },
            "result": {
              "status": "passed",
              "duration": 1653200
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 5,
            "name": "I send a POST request to the \"books\" endpoint with valid book details",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:23"
            },
            "result": {
              "status": "passed",
              "duration": 70048699
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 6,
            "name": "the response status of POST should be either 201 or 208",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:115"
            },
            "result": {
              "status": "passed",
              "duration": 665899
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 7,
            "name": "the response should contain the created book details",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:119"
            },
            "result": {
              "status": "passed",
              "duration": 3844599
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-user-with-valid-data",
        "keyword": "Scenario",
        "line": 9,
        "name": "Verify the response of the POST /api/books API as user with valid data",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 10,
            "name": "I am an authenticated POST user API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:18"
            },
            "result": {
              "status": "passed",
              "duration": 1910399
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 11,
            "name": "I send a POST request to the \"books\" endpoint with valid book details",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:23"
            },
            "result": {
              "status": "passed",
              "duration": 69993499
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 12,
            "name": "the response status of POST should be either 201 or 208",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:115"
            },
            "result": {
              "status": "passed",
              "duration": 466600
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 13,
            "name": "the response should contain the created book details",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:119"
            },
            "result": {
              "status": "passed",
              "duration": 3045900
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-admin-without-both-title-and-author",
        "keyword": "Scenario",
        "line": 17,
        "name": "Verify the response of the POST /api/books API as admin without both title and author",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 18,
            "name": "I am an authenticated POST admin API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:13"
            },
            "result": {
              "status": "passed",
              "duration": 2052999
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 19,
            "name": "I send a POST request to the \"books\" endpoint without both title and author",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:35"
            },
            "result": {
              "status": "passed",
              "duration": 70197099
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 20,
            "name": "the response status of POST should be 400",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "passed",
              "duration": 410600
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 21,
            "name": "the response should display the message \"Mandatory parameters should not be null\"",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:140"
            },
            "result": {
              "status": "passed",
              "duration": 1737700
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-user-without-both-title-and-author",
        "keyword": "Scenario",
        "line": 23,
        "name": "Verify the response of the POST /api/books API as user without both title and author",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 24,
            "name": "I am an authenticated POST user API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:18"
            },
            "result": {
              "status": "passed",
              "duration": 1207899
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 25,
            "name": "I send a POST request to the \"books\" endpoint without both title and author",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:35"
            },
            "result": {
              "status": "passed",
              "duration": 69902499
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 26,
            "name": "the response status of POST should be 400",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "passed",
              "duration": 509999
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 27,
            "name": "the response should display the message \"Mandatory parameters should not be null\"",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:140"
            },
            "result": {
              "status": "passed",
              "duration": 2250099
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;attempt-to-create-two-different-books-with-the-same-author-but-different-titles-as-admin",
        "keyword": "Scenario",
        "line": 32,
        "name": "Attempt to create two different books with the same author but different titles as admin",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 33,
            "name": "I am an authenticated POST admin API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:13"
            },
            "result": {
              "status": "passed",
              "duration": 6501800
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 34,
            "name": "I send a POST request to the \"books\" endpoint with two different titles and the same author",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:47"
            },
            "result": {
              "status": "passed",
              "duration": 88374899
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 35,
            "name": "the response status of POST should be either 201 or 208",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:115"
            },
            "result": {
              "status": "passed",
              "duration": 460300
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 36,
            "name": "the response should contain the details of both books",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:123"
            },
            "result": {
              "status": "passed",
              "duration": 3109699
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;attempt-to-create-two-different-books-with-the-same-author-but-different-titles-as-user",
        "keyword": "Scenario",
        "line": 38,
        "name": "Attempt to create two different books with the same author but different titles as user",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 39,
            "name": "I am an authenticated POST user API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:18"
            },
            "result": {
              "status": "passed",
              "duration": 1135299
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 40,
            "name": "I send a POST request to the \"books\" endpoint with two different titles and the same author",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:47"
            },
            "result": {
              "status": "passed",
              "duration": 82180800
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 41,
            "name": "the response status of POST should be either 201 or 208",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:115"
            },
            "result": {
              "status": "passed",
              "duration": 261700
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 42,
            "name": "the response should contain the details of both books",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:123"
            },
            "result": {
              "status": "passed",
              "duration": 4244099
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-admin-with-empty-title",
        "keyword": "Scenario",
        "line": 46,
        "name": "Verify the response of the POST /api/books API as admin with empty title",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 47,
            "name": "I am an authenticated POST admin API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:13"
            },
            "result": {
              "status": "passed",
              "duration": 1088500
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 48,
            "name": "I send a POST request to the \"books\" endpoint with empty title",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:60"
            },
            "result": {
              "status": "passed",
              "duration": 70107000
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 49,
            "name": "the response status of POST should be 400",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "failed",
              "duration": 875500,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m208\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\postBook.steps.ts:133:33)"
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-user-with-empty-title",
        "keyword": "Scenario",
        "line": 51,
        "name": "Verify the response of the POST /api/books API as user with empty title",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 52,
            "name": "I am an authenticated POST user API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:18"
            },
            "result": {
              "status": "passed",
              "duration": 1844799
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 53,
            "name": "I send a POST request to the \"books\" endpoint with empty title",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:60"
            },
            "result": {
              "status": "passed",
              "duration": 68067199
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 54,
            "name": "the response status of POST should be 400",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "failed",
              "duration": 664000,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m208\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\postBook.steps.ts:133:33)"
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-admin-with-an-existing-title-but-a-different-author",
        "keyword": "Scenario",
        "line": 58,
        "name": "Verify the response of the POST /api/books API as admin with an existing title but a different author",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 59,
            "name": "I am an authenticated POST admin API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:13"
            },
            "result": {
              "status": "passed",
              "duration": 1180100
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 60,
            "name": "I send 2 POST requests to the \"books\" endpoint with the same title but different authors",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:72"
            },
            "result": {
              "status": "passed",
              "duration": 80021500
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 61,
            "name": "the response status of POST should be 201",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "failed",
              "duration": 612100,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m208\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\postBook.steps.ts:133:33)"
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 62,
            "name": "the response should contain the details of both books with the same title but different authors",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:127"
            },
            "result": {
              "status": "skipped",
              "duration": 0
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-user-with-an-existing-title-but-a-different-author",
        "keyword": "Scenario",
        "line": 64,
        "name": "Verify the response of the POST /api/books API as user with an existing title but a different author",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 65,
            "name": "I am an authenticated POST user API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:18"
            },
            "result": {
              "status": "passed",
              "duration": 1230400
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 66,
            "name": "I send 2 POST requests to the \"books\" endpoint with the same title but different authors",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:72"
            },
            "result": {
              "status": "passed",
              "duration": 76171099
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 67,
            "name": "the response status of POST should be 201",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "failed",
              "duration": 840099,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m208\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\postBook.steps.ts:133:33)"
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 68,
            "name": "the response should contain the details of both books with the same title but different authors",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:127"
            },
            "result": {
              "status": "skipped",
              "duration": 0
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-admin-without-title",
        "keyword": "Scenario",
        "line": 72,
        "name": "Verify the response of the POST /api/books API as admin without title",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 73,
            "name": "I am an authenticated POST admin API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:13"
            },
            "result": {
              "status": "passed",
              "duration": 1706600
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 74,
            "name": "I send a POST request to the \"books\" endpoint without title",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:90"
            },
            "result": {
              "status": "passed",
              "duration": 139517300
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 75,
            "name": "the response status of POST should be 400",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "failed",
              "duration": 795200,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m201\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\postBook.steps.ts:133:33)"
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-user-without-title",
        "keyword": "Scenario",
        "line": 77,
        "name": "Verify the response of the POST /api/books API as user without title",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 78,
            "name": "I am an authenticated POST user API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:18"
            },
            "result": {
              "status": "passed",
              "duration": 1744700
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 79,
            "name": "I send a POST request to the \"books\" endpoint without title",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:90"
            },
            "result": {
              "status": "passed",
              "duration": 137702099
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 80,
            "name": "the response status of POST should be 400",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "failed",
              "duration": 1199500,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m201\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\postBook.steps.ts:133:33)"
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-admin-with-title-and-without-author",
        "keyword": "Scenario",
        "line": 84,
        "name": "Verify the response of the POST /api/books API as admin with title and without author",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 85,
            "name": "I am an authenticated POST admin API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:13"
            },
            "result": {
              "status": "passed",
              "duration": 1197899
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 86,
            "name": "I send a POST request to the \"books\" endpoint with title and without author",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:102"
            },
            "result": {
              "status": "passed",
              "duration": 71473399
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 87,
            "name": "the response status of POST should be 201",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "passed",
              "duration": 707100
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 88,
            "name": "the response should contain the created book details with title and null author",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:136"
            },
            "result": {
              "status": "passed",
              "duration": 3397300
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "create-a-new-book;verify-the-response-of-the-post-/api/books-api-as-user-with-title-and-without-author",
        "keyword": "Scenario",
        "line": 90,
        "name": "Verify the response of the POST /api/books API as user with title and without author",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 91,
            "name": "I am an authenticated POST user API client",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:18"
            },
            "result": {
              "status": "passed",
              "duration": 1048400
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 92,
            "name": "I send a POST request to the \"books\" endpoint with title and without author",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:102"
            },
            "result": {
              "status": "passed",
              "duration": 72450699
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 93,
            "name": "the response status of POST should be 201",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:132"
            },
            "result": {
              "status": "passed",
              "duration": 586300
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 94,
            "name": "the response should contain the created book details with title and null author",
            "match": {
              "location": "src\\tests\\steps\\postBook.steps.ts:136"
            },
            "result": {
              "status": "passed",
              "duration": 1844900
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      }
    ],
    "id": "create-a-new-book",
    "line": 1,
    "keyword": "Feature",
    "name": "Create a new book",
    "tags": [],
    "uri": "src\\tests\\features\\postBook.feature"
  },
  {
    "description": "",
    "elements": [
      {
        "description": "",
        "id": "update-a-book;verify-the-response-of-the-put-/api/books/{id}-api-as-admin",
        "keyword": "Scenario",
        "line": 3,
        "name": "Verify the response of the PUT /api/books/{id} API as admin",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 5,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 70945699
            }
          },
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 6,
            "name": "I am an authenticated PUT admin API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:21"
            },
            "result": {
              "status": "passed",
              "duration": 1522199
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 7,
            "name": "I send a PUT request to the endpoint with the new author \"John Doe\"",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:31"
            },
            "result": {
              "status": "passed",
              "duration": 67042200
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 8,
            "name": "the response status of PUT should be 200",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "failed",
              "duration": 1134899,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m208\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\updateBooks.steps.ts:101:33)"
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 9,
            "name": "the response should contain the updated book details with author \"John Doe\"",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:88"
            },
            "result": {
              "status": "skipped",
              "duration": 0
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;verify-the-response-of-the-put-/api/books/{id}-api-as-user",
        "keyword": "Scenario",
        "line": 12,
        "name": "Verify the response of the PUT /api/books/{id} API as user",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 14,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 72420700
            }
          },
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 15,
            "name": "I am an authenticated PUT user API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:26"
            },
            "result": {
              "status": "passed",
              "duration": 2049100
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 16,
            "name": "I send a PUT request to the endpoint with the new author \"Jane Smith\"",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:31"
            },
            "result": {
              "status": "passed",
              "duration": 72181200
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 17,
            "name": "the response status of PUT should be 403",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 369299
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;update-existing-book-without-author-(different-title)-as-admin",
        "keyword": "Scenario",
        "line": 21,
        "name": "Update existing book without author (different title) as admin",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 22,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 69623499
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 23,
            "name": "I am an authenticated PUT admin API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:21"
            },
            "result": {
              "status": "passed",
              "duration": 1211600
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 24,
            "name": "I send a PUT request with different title and without author field",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:40"
            },
            "result": {
              "status": "passed",
              "duration": 68468800
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 25,
            "name": "the response status of PUT should be 200",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "failed",
              "duration": 1006700,
              "error_message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Proxy.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\node_modules\\playwright\\lib\\matchers\\expect.js:227:37)\n    at validateResponseStatus (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\requests\\ValidateResponseStatus.ts:10:28)\n    at World.<anonymous> (C:\\Users\\Naduni\\Documents\\GitHub\\ITQA-API-UI-Testing\\api-testing\\src\\tests\\steps\\updateBooks.steps.ts:101:33)"
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;update-existing-book-without-author-(different-title)-as-user",
        "keyword": "Scenario",
        "line": 28,
        "name": "Update existing book without author (different title) as user",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 29,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 76526000
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 30,
            "name": "I am an authenticated PUT user API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:26"
            },
            "result": {
              "status": "passed",
              "duration": 1906300
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 31,
            "name": "I send a PUT request with different title and without author field",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:40"
            },
            "result": {
              "status": "passed",
              "duration": 65994499
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 32,
            "name": "the response status of PUT should be 403",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 812699
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 33,
            "name": "the response should be \"User is not permitted.\"",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:105"
            },
            "result": {
              "status": "passed",
              "duration": 3526499
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;admin-tries-to-update-a-non-existing-book-id",
        "keyword": "Scenario",
        "line": 36,
        "name": "Admin tries to update a non-existing book id",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 37,
            "name": "I am an authenticated PUT admin API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:21"
            },
            "result": {
              "status": "passed",
              "duration": 1176999
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 38,
            "name": "I send a PUT request to the endpoint with the non-existing book id",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:50"
            },
            "result": {
              "status": "passed",
              "duration": 66340300
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 39,
            "name": "the response status of PUT should be 404",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 551999
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 40,
            "name": "the response should display an error message \"Book not found\"",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:124"
            },
            "result": {
              "status": "passed",
              "duration": 2427799
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;user-tries-to-update-a-non-existing-book-id",
        "keyword": "Scenario",
        "line": 42,
        "name": "User tries to update a non-existing book id",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 43,
            "name": "I am an authenticated PUT user API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:26"
            },
            "result": {
              "status": "passed",
              "duration": 1020500
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 44,
            "name": "I send a PUT request to the endpoint with the non-existing book id",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:50"
            },
            "result": {
              "status": "passed",
              "duration": 67049199
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 45,
            "name": "the response status of PUT should be 403",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 780900
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 46,
            "name": "the response should display an error message \"User is not permitted.\"",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:124"
            },
            "result": {
              "status": "passed",
              "duration": 1859299
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;update-existing-book-with-a-new-title-and-the-same-author-as-admin",
        "keyword": "Scenario",
        "line": 48,
        "name": "Update existing book with a new title and the same author as admin",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 49,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 68555999
            }
          },
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 50,
            "name": "I am an authenticated PUT admin API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:21"
            },
            "result": {
              "status": "passed",
              "duration": 1026199
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 51,
            "name": "I send a PUT request to the endpoint with a new title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:59"
            },
            "result": {
              "status": "passed",
              "duration": 67786400
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 52,
            "name": "the response status of PUT should be 200",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 339200
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 53,
            "name": "the response should contain the updated book details with a new title and the same author",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:94"
            },
            "result": {
              "status": "passed",
              "duration": 1740499
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;update-existing-book-with-a-new-title-and-the-same-author-as-user",
        "keyword": "Scenario",
        "line": 55,
        "name": "Update existing book with a new title and the same author as user",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 56,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 69611699
            }
          },
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 57,
            "name": "I am an authenticated PUT user API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:26"
            },
            "result": {
              "status": "passed",
              "duration": 2152899
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 58,
            "name": "I send a PUT request to the endpoint with a new title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:59"
            },
            "result": {
              "status": "passed",
              "duration": 65993300
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 59,
            "name": "the response status of PUT should be 403",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 617500
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 60,
            "name": "the response should display an error message \"User is not permitted.\"",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:124"
            },
            "result": {
              "status": "passed",
              "duration": 5159699
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;update-existing-book-without-both-title-and-author-as-admin",
        "keyword": "Scenario",
        "line": 62,
        "name": "Update existing book without both title and author as admin",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 63,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 72990499
            }
          },
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 64,
            "name": "I am an authenticated PUT admin API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:21"
            },
            "result": {
              "status": "passed",
              "duration": 1913600
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 65,
            "name": "I send a PUT request to the endpoint without title and author",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:69"
            },
            "result": {
              "status": "passed",
              "duration": 70149200
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 66,
            "name": "the response status of PUT should be 400",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 802999
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 67,
            "name": "the response should display an error message \"Mandatory parameters should not be null\"",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:124"
            },
            "result": {
              "status": "passed",
              "duration": 3606800
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;update-existing-book-without-both-title-and-author-as-user",
        "keyword": "Scenario",
        "line": 69,
        "name": "Update existing book without both title and author as user",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 70,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 77549199
            }
          },
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 71,
            "name": "I am an authenticated PUT user API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:26"
            },
            "result": {
              "status": "passed",
              "duration": 2233300
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 72,
            "name": "I send a PUT request to the endpoint without title and author",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:69"
            },
            "result": {
              "status": "passed",
              "duration": 67407999
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 73,
            "name": "the response status of PUT should be 403",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 642000
            }
          },
          {
            "arguments": [],
            "keyword": "And ",
            "line": 74,
            "name": "the response should display an error message \"User is not permitted.\"",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:124"
            },
            "result": {
              "status": "passed",
              "duration": 1396300
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;update-an-existing-book-without-title-as-admin",
        "keyword": "Scenario",
        "line": 76,
        "name": "Update an existing book without title as admin",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 77,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 71187200
            }
          },
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 78,
            "name": "I am an authenticated PUT admin API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:21"
            },
            "result": {
              "status": "passed",
              "duration": 1197499
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 79,
            "name": "I send a PUT request to the \"books\" endpoint to update an existing book without a title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:78"
            },
            "result": {
              "status": "passed",
              "duration": 67600199
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 80,
            "name": "the response status of PUT should be 400",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 620100
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      },
      {
        "description": "",
        "id": "update-a-book;update-an-existing-book-without-title-as-user",
        "keyword": "Scenario",
        "line": 82,
        "name": "Update an existing book without title as user",
        "steps": [
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 83,
            "name": "I create a new book entry with a random title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:15"
            },
            "result": {
              "status": "passed",
              "duration": 74873400
            }
          },
          {
            "arguments": [],
            "keyword": "Given ",
            "line": 84,
            "name": "I am an authenticated PUT user API client",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:26"
            },
            "result": {
              "status": "passed",
              "duration": 1029599
            }
          },
          {
            "arguments": [],
            "keyword": "When ",
            "line": 85,
            "name": "I send a PUT request to the \"books\" endpoint to update an existing book without a title",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:78"
            },
            "result": {
              "status": "passed",
              "duration": 65335500
            }
          },
          {
            "arguments": [],
            "keyword": "Then ",
            "line": 86,
            "name": "the response status of PUT should be 403",
            "match": {
              "location": "src\\tests\\steps\\updateBooks.steps.ts:100"
            },
            "result": {
              "status": "passed",
              "duration": 613099
            }
          }
        ],
        "tags": [],
        "type": "scenario"
      }
    ],
    "id": "update-a-book",
    "line": 1,
    "keyword": "Feature",
    "name": "Update a book",
    "tags": [],
    "uri": "src\\tests\\features\\updateBooks.feature"
  }
]